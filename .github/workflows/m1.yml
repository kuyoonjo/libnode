name: m1

on:
  workflow_dispatch:
    inputs:
      nodeVersion:
        description: "Node.js version"
        required: true
  push:
    tags:
      - v*

env:
  LIBNODE_NODE_VERSION: ${{ github.event.inputs.nodeVersion }}

jobs:
  build:
    strategy:
      fail-fast: false
    runs-on: macos-12
    env:
      LIBNODE_ARCH: 'arm64'
      LIBNODE_SMALL_ICU: 1
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install ninja on macOS
        run: HOMEBREW_NO_AUTO_UPDATE=1 brew install ninja

      - name: Download source code of Node.js
        run: python -m scripts.download

      - name: Patch source code of Node.js
        run: python -m scripts.patch

      - name: Build
        run: |
          export CC_host="cc"
          export CXX_host="c++"
          export CC="cc -arch arm64"
          export CXX="c++ -arch arm64"
          cd node-$LIBNODE_NODE_VERSION
          ./configure --dest-cpu=arm64 --cross-compiling --dest-os=mac --enable-static --with-intl=small-icu
          make -j4
          cd ..

      - name: Copy headers
        run: python -m scripts.headers

      - name: Postprocess
        run: python -m scripts.postproc

      - name: Archive
        run: |
          zipname=$(python -m scripts.archive)
          echo "::set-output name=zipname::$zipname"
        shell: bash
        id: archive

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.archive.outputs.zipname }}
          path: ${{ steps.archive.outputs.zipname }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.archive.outputs.zipname }}
          asset_name: ${{ steps.archive.outputs.zipname }}
          asset_content_type: application/zip

      - name: Objdump
        run: objdump -t libnode/lib/libnode.a | grep 'file format'
